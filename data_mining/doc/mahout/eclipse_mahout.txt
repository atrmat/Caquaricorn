###################################################################################
Environment:
1. Eclipse IDE (J2EE)
http://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/keplersr1

2. Eclipse maven plugin
in Eclipse install the new software:
http://download.eclipse.org/technology/m2e/releases

3. mahout binary
http://mirrors.hust.edu.cn/apache/mahout/0.8/

###################################################################################
Demo: a test demo for recommend
1. create a new maven project

2. create a new folder atrmat under /src/main/java

3. new a class file RecommenderIntro.java

4. add all mahout library
   mahout-math-0.8.jar
   mahout-core-0.8.jar
   mahout-core-0.8-job.jar
   mahout-examples-0.8.jar
   mahout-examples-0.8-job.jar
   mahout-integration-0.8.jar

5. modify the pom.xml, add followings into the file
  <build>
  	<defaultGoal>compile</defaultGoal>
  </build>

6. mvn build, install

7. run as java application

###################################################################################
Recommend demo:
===============================================================================
import java.io.File;
import java.io.IOException;
import java.util.List;

import org.apache.mahout.cf.taste.common.TasteException;
import org.apache.mahout.cf.taste.impl.model.file.FileDataModel;
import org.apache.mahout.cf.taste.impl.neighborhood.NearestNUserNeighborhood;
import org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender;
import org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarity;
import org.apache.mahout.cf.taste.model.DataModel;
import org.apache.mahout.cf.taste.neighborhood.UserNeighborhood;
import org.apache.mahout.cf.taste.recommender.RecommendedItem;
import org.apache.mahout.cf.taste.recommender.Recommender;
import org.apache.mahout.cf.taste.similarity.UserSimilarity;

public class RecommenderIntro {
    public static void main(String[] args) throws TasteException {
        try {
            DataModel model=new FileDataModel(new File("PATH to intro.csv"));
            UserSimilarity similarity=new PearsonCorrelationSimilarity(model);
            UserNeighborhood neighborhood=new NearestNUserNeighborhood(2,similarity,model);
            Recommender recommender=new GenericUserBasedRecommender(model,neighborhood,similarity);
            List recommendations=recommender.recommend(1,1);
            for(RecommendedItem recommendation : recommendations)
                System.out.println(recommendation);
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
}
===============================================================================

Result:
RecommendedItem[item:104, value:4.257081]
###################################################################################
User CF demo:
===============================================================================
import java.io.File;
import java.io.IOException;
import java.util.List;

import org.apache.mahout.cf.taste.common.TasteException;
import org.apache.mahout.cf.taste.impl.common.LongPrimitiveIterator;
import org.apache.mahout.cf.taste.impl.model.file.FileDataModel;
import org.apache.mahout.cf.taste.impl.neighborhood.NearestNUserNeighborhood;
import org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender;
import org.apache.mahout.cf.taste.impl.similarity.EuclideanDistanceSimilarity;
import org.apache.mahout.cf.taste.model.DataModel;
import org.apache.mahout.cf.taste.recommender.RecommendedItem;
import org.apache.mahout.cf.taste.recommender.Recommender;
import org.apache.mahout.cf.taste.similarity.UserSimilarity;

public class UserCF {

    final static int NEIGHBORHOOD_NUM = 2;
    final static int RECOMMENDER_NUM = 3;

    public static void main(String[] args) throws IOException, TasteException {
        String file = "H://intro.csv";
        DataModel model = new FileDataModel(new File(file));
        UserSimilarity user = new EuclideanDistanceSimilarity(model);
        NearestNUserNeighborhood neighbor = new NearestNUserNeighborhood(NEIGHBORHOOD_NUM, user, model);
        Recommender r = new GenericUserBasedRecommender(model, neighbor, user);
        LongPrimitiveIterator iter = model.getUserIDs();

        System.out.println("uid (recommend item_id, item_value)");
        while (iter.hasNext()) {
            long uid = iter.nextLong();
            List<RecommendedItem> list = r.recommend(uid, RECOMMENDER_NUM);
            System.out.printf("uid:%s", uid);
            for (RecommendedItem ritem : list) {
                System.out.printf("(%s,%f)", ritem.getItemID(), ritem.getValue());
            }
            System.out.println();
        }
    }
}
===============================================================================
Result:
uid (recommend item_id, item_value)
uid:1(104,4.274336)(106,4.000000)
uid:2(105,4.055916)
uid:3(103,3.360987)(102,2.773169)
uid:4(102,3.000000)
uid:5

###################################################################################
Test data
filename: intro.csv
===============================================================================
UserID,ItemID,Preference Value
1,101,5  
1,102,3  
1,103,2.5  
2,101,2  
2,102,2.5  
2,103,5  
2,104,2  
3,101,2.5  
3,104,4  
3,105,4.5  
3,107,5  
4,101,5  
4,103,3  
4,104,4.5  
4,106,4  
5,101,4  
5,102,3  
5,103,2  
5,104,4  
5,105,3.5  
5,106,4
===============================================================================

###################################################################################
Reference:
1. http://blog.sina.com.cn/s/blog_6dc9c7cb0101bmch.html
2. http://blog.csdn.net/softwarehe/article/details/7355669
###################################################################################
